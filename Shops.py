# 1. Создай класс `Store`:
# -Атрибуты класса:
# - `name`: название магазина.
# - `address`: адрес магазина.
# - `items`: словарь, где ключ - название товара, а значение - его цена. Например, `{'apples': 0.5, 'bananas': 0.75}`.
# - Методы класса:
# - `__init__ - конструктор, который инициализирует название и адрес, а также пустой словарь для `items`.
# -  метод для добавления товара в ассортимент.
# - метод для удаления товара из ассортимента.
# - метод для получения цены товара по его названию. Если товар отсутствует, возвращайте `None`.
# - метод для обновления цены товара.
# 2. Создай несколько объектов класса `Store`:
# Создай не менее трех различных магазинов с разными названиями, адресами и добавь в каждый из них несколько товаров.
# 3. Протестировать методы:
# Выбери один из созданных магазинов и протестируй все его методы: добавь товар, обнови цену, убери товар и запрашивай цену.
# В поле для ответа загрузи ссылку на GitHub-репозиторий, содержащий код проекта с реализацией задания.

class Store():
    def __init__(self, name, address):
        """
        Инициализирует новый объект класса Store.
        :param name: str - название магазина.
        :param address: str - адрес магазина.
        """
        self.name = name
        self.address = address
        self.items = {}  # пустой словарь для товаров

    def add_item(self, item_name, price):
        """
        Добавляет товар в ассортимент магазина.
        :param item_name: str - название товара.
        :param price: float - цена товара.
        """
        self.items[item_name] = price

    def remove_item(self, item_name):
        """
        Удаляет товар из ассортимента магазина.
        :param item_name: str - название товара.
        """
        if item_name in self.items:
            del self.items[item_name]

    def get_price(self, item_name):
        """
        Возвращает цену товара по его названию.
        :param item_name: str - название товара.
        :return: float or None - цена товара, если он есть в ассортименте, иначе None.
        """
        return self.items.get(item_name)

    def update_price(self, item_name, new_price):
        """
        Обновляет цену существующего товара.
        :param item_name: str - название товара.
        :param new_price: float - новая цена товара.
        """
        if item_name in self.items:
            self.items[item_name] = new_price
        else:
            print(f"Товар '{item_name}' не найден в ассортименте.")

    def __str__(self):
        return f"Название магазина: {self.name}, адрес: {self.address}, товары: {self.items}"

shops = []  # Создаём пустой список магазинов
store1 = Store("Сластёна", "ул.Школная, д.2") # Создаём магазин
shops.append(store1)    # Добавляем магазин в список
store1.add_item("Торт", 122.5)  # Добавляем в магазин товар
store1.add_item("Сочник", 40.25)

store2 = Store("Огонёк", "ул.Ленина, д.64") # Создаём магазин
shops.append(store2)    # Добавляем магазин в список
store2.add_item("Молоко", 81.5) # Добавляем в магазин товар
store2.add_item("Хлеб", 45.1)

store3 = Store("Луковка", "ул.Лермонтова, д.15")    # Создаём магазин
shops.append(store3)    # Добавляем магазин в список
store3.add_item("Картошка", 31.5)   # Добавляем в магазин товар
store3.add_item("Лук", 12.25)   # Добавляем в магазин товар
store3.add_item("Яблоки", 99.99)    # Добавляем в магазин товар

print('\n'f"Цена на лук - {store3.get_price('Лук')}")       # Получаем цену указанного товара
print('\n'"Изменение цены на лук")
store3.update_price("Лук", 12.7)   # Изменяем цену указанного товара
print(f'Обновлённая цена на лук - {store3.get_price("Лук")}')

print('\n'"Удаляем лук из списка товаров")
store3.remove_item("Лук")   # Удаляем указанный товар в магазине
print(f"Цена на лук - {store3.get_price('Лук')}")

print('\n'"Информация о магазинах")
for shop in shops:
    print(shop)
